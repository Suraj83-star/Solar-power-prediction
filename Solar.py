# This is a sample Python script.

# Press Shift+F10 to execute it or replace it with your code.
# Press Double Shift to search everywhere for classes, files, tool windows, actions, and settings.
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score
from sklearn.ensemble import RandomForestRegressor

# Load the datasets
generation_data = pd.read_csv('C:\\Users\\ZACOBE\\Desktop\\MBA(IT)\\semester 2nd\\Data Warehouse\\Solar data\\Plant_1_Generation_Data.csv')
weather_data = pd.read_csv('C:\\Users\\ZACOBE\\Desktop\\MBA(IT)\\semester 2nd\\Data Warehouse\\Solar data\Plant_1_Weather_Sensor_Data.csv')

print('The first five rows of the datasets are:', generation_data.head)
print('-----------------------------------------------------------')
print('The first five rows of the datasets are:', weather_data.head)
print('-----------------------------------------------------------')
print('Number of samples(rows) of Plant_1_Generation_Data:',generation_data.shape[0])
print('Number of features(Columns) of Plant_1_Generation_Data:',generation_data.shape[1])
print('-----------------------------------------------------------')
print('Number of samples(rows) of Plant_2_Generation_Data:',weather_data.shape[0])
print('Number of features(columns) of Plant_2_Generation_Data:',weather_data.shape[1])
print('-----------------------------------------------------------')
print('The percentage of missing value on Generation_data is :' , generation_data.isna().sum().sum()/(generation_data.shape[0]*generation_data.shape[1]) *100 , '%')
print('The percentage of missing value on Weather_data is :' , weather_data.isna().sum().sum()/(weather_data.shape[0]*weather_data.shape[1]) *100 , '%')
print('-----------------------------------------------------------')
print('The information of the generation dataset:')
print(generation_data.info())
print('-----------------------------------------------------------')
print('The information of weather dataset:')
print(weather_data.info())
print('-----------------------------------------------------------')
print('Number of unique SOURCE_KEY values in generation_data :',len(generation_data.SOURCE_KEY.unique()))
print('Number of unique SOURCE_KEY values in weather_data :',len(weather_data.SOURCE_KEY.unique()))
print('-----------------------------------------------------------')
# Convert the 'DateTime' column to a datetime object
generation_data['DATE_TIME'] = pd.to_datetime(generation_data['DATE_TIME'], format="%d-%m-%Y %H:%M")
weather_data['DATE_TIME'] = pd.to_datetime(weather_data["DATE_TIME"])
# Basic Statistics of data
print(generation_data.describe())
print('-----------------------------------------------------------')
print(weather_data.describe())
print('-----------------------------------------------------------')
# Plotting the bar graph
plt.figure(figsize=(6, 8))  # Adjust the figure size as needed
plt.bar(generation_data['DATE_TIME'], generation_data['DC_POWER'], color='red')

# Adding labels and title
plt.xlabel('Date and Time')
plt.ylabel('DC Power')
plt.title('DC Power vs Date and Time')

# Rotate x-axis labels for better readability
plt.xticks(rotation=45)

# Show plot
plt.tight_layout()
plt.show()
# plotting the pie chart using source key and DC_Power of every inverter
power_by_inverter = generation_data.groupby('SOURCE_KEY')['DC_POWER'].sum()
plt.figure(figsize=(8, 6))  # Adjust figure size if needed
plt.pie(power_by_inverter, labels=power_by_inverter.index, autopct='%1.1f%%', startangle=140)
plt.title('DC Power Generated by Inverter ID')
plt.axis('equal')
plt.show()
#creating a line plot to show case the trend s of Ambient and module temperature over time
plt.figure(figsize=(10, 6))  # Adjust figure size if needed
plt.plot(generation_data['DATE_TIME'], generation_data['AC_POWER'], label='AC Power')
plt.plot(generation_data['DATE_TIME'], generation_data['DC_POWER'], label='DC Power')

# Adding labels and title
plt.xlabel('Date')
plt.ylabel('Power')
plt.title('AC vs DC Power Over Time')
plt.legend()

# Show plot
plt.grid(True)  # Add grid for better readability
plt.tight_layout()  # Adjust layout
plt.show()
#creating a line plot to show case the trend s of AC power and DC power
plt.figure(figsize=(10, 6))  # Adjust figure size if needed
plt.plot(weather_data['DATE_TIME'], weather_data['AMBIENT_TEMPERATURE'], label='AMBIENT_TEMPERATURE')
plt.plot(weather_data['DATE_TIME'], weather_data['MODULE_TEMPERATURE'], label='MODULE_TEMPERATURE')

# Adding labels and title
plt.xlabel('Date')
plt.ylabel('Temperature')
plt.title('Ambient vs Module Temperature Over Time')
plt.legend()

# Show plot
plt.grid(True)  # Add grid for better readability
plt.tight_layout()  # Adjust layout
plt.show()
#Merging the generation and weather data together
Main_data = pd.merge(generation_data.drop(columns=['PLANT_ID']), weather_data.drop(columns=['PLANT_ID', 'SOURCE_KEY']), on='DATE_TIME')
print('Linear Regression')
X = Main_data[['DAILY_YIELD', 'TOTAL_YIELD', 'AMBIENT_TEMPERATURE','MODULE_TEMPERATURE', 'IRRADIATION']]
y = Main_data['AC_POWER']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=.2, random_state=42)

lr_model = LinearRegression()
lr_model.fit(X_train, y_train)

lr_score = lr_model.score(X_test, y_test)
print(f" Linear Regression Score is {lr_score*100:.4f} %")


y_pred_lr = lr_model.predict(X_test)
R2_Score_lr = round(r2_score(y_pred_lr,y_test) * 100, 2)

print("R2 Score : ",R2_Score_lr,"%")
print('------Random Forest Regression--------')

rfr = RandomForestRegressor()
rfr.fit(X_train,y_train)
y_pred_rfr = rfr.predict(X_test)
R2_Score_rfr = round(r2_score(y_pred_rfr,y_test) * 100, 2)
print("R2 Score : ",R2_Score_rfr,"%")
print('------Predicting the future value-------')
prediction = rfr.predict(X_test)
print(prediction)
print('------cross checking the actual and predicted value------')
cross_checking = pd.DataFrame({'Actual' : y_test , 'Predicted' : prediction})
print(cross_checking.head())
print('------cross checking error between the actual and predicted value-----')
cross_checking['Error'] = cross_checking['Actual'] - cross_checking['Predicted']
print(cross_checking.head(20))

